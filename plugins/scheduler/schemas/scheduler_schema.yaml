schema;action_map:
  type: map
  nullable: false
  mapping:
    local_times:
      type: seq
      nullable: false
      sequence:
        - type: str
          pattern: '^(0?[0-9]|1[0-9]|2[0-4])(:[0-5][0-9])'
          unique: true
    utc_times:
      type: seq
      nullable: false
      sequence:
        - type: str
          pattern: '^(0?[0-9]|1[0-9]|2[0-4])(:[0-5][0-9])'
          unique: false
    mission_time: { type: int, range: { min: 1 }, nullable: false }
    max_mission_time: { type: int, range: { min: 1 }, nullable: false }
    real_time: { type: int, range: { min: 1 }, nullable: false }
    idle_time: { type: int, range: { min: 1 }, nullable: false }
    method: { type: str, enum: [ 'restart', 'rotate', 'shutdown', 'load' ], nullable: false }
    mission_id: { type: int, nullable: false }
    mission_file: { type: str, nullable: false, range: { min: 1 } }
    populated: { type: bool, nullable: false }
    mission_end: { type: bool, nullable: false }
    shutdown: { type: bool, nullable: false }
    run_extensions: { type: bool, nullable: false }
    onSimulationStart: { type: str, nullable: false, pattern: '^(load|lua|call|run):.+$' }
    onSimulationStop: { type: str, nullable: false, pattern: '^(load|lua|call|run):.+$' }
    onMissionEnd: { type: str, nullable: false, pattern: '^(load|lua|call|run):.+$' }
    onShutdown: { type: str, nullable: false, pattern: '^(load|lua|call|run):.+$' }

schema;action_seq:
  type: seq
  sequence:
    - include: 'action_map'

schema;warn_map:
  type: map
  nullable: false
  mapping:
    regex;(^\d+$): {type: str, nullable: false, range: {min: 1}}

schema;warn_seq:
  type: seq
  nullable: false
  sequence:
    - {type: int, unique: true, nullable: false}

schema;master_schema:
  type: map
  nullable: false
  mapping:
    startup_delay: {type: int, range: {min: 0}, nullable: false}
    warn:
      type: map
      nullable: false
      mapping:
        text: {type: str, nullable: false}
        sound: {type: str, nullable: false}
        times:
          type: any
          nullable: false
          func: seq_or_map
          enum: ['warn_seq', 'warn_map']
    schedule:
      type: map
      nullable: false
      mapping:
        timezone: {type: str, nullable: false, range: {min: 1}}
        regex;(^(0?[0-9]|1[0-9]|2[0-4])(:[0-5][0-9])?-(0?[0-9]|1[0-9]|2[0-4])(:?[0-5][0-9])?$): {type: str, pattern: '^[YNP]{7}$', nullable: false}
    action:
      type: any
      nullable: false
      func: seq_or_map
      enum: ['action_seq', 'action_map']
    # Allow deep nesting for Node/Instance declaration
    regex;(.+):
      include: 'master_schema'

type: map
nullable: false
mapping:
  DEFAULT:
    include: 'master_schema'
  commands:
    include: 'commands_schema'
  chat_commands:
    include: 'chat_commands_schema'
  regex;(.+):
    include: 'master_schema'
